{"version":3,"sources":["RecipeSelector.js","components/dinneroptions.js","App.js","serviceWorker.js","index.js"],"names":["RecipeSelector","className","Button","variant","onClick","this","props","handleClick","key","Math","random","id","recipe","React","Component","App","generateRandomRecipe","randomRecipe","setState","shuffleRecipe","state","randomNumber","floor","length","array","sort","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0RAyBeA,E,uKAnBX,OACE,yBAAKC,UAAU,OACb,kBAACC,EAAA,EAAD,CAAQC,QAAQ,YAChBC,QAASC,KAAKC,MAAMC,aADpB,cAKA,yBACCN,UAAU,SACVO,IAAKC,KAAKC,UAET,wBAAIC,GAAG,UAAUN,KAAKC,MAAMM,c,GAbTC,IAAMC,WCqJpBF,EAzJF,CACT,CACA,OAAU,IAEb,CACG,OAAU,aAEV,CACA,OAAU,iCAEV,CACA,OAAU,SAEV,CACA,OAAU,6BAEV,CACA,OAAU,YAEV,CACA,OAAU,OAEV,CACA,OAAU,uBAEV,CACA,OAAU,qBAEV,CACA,OAAU,2CAEV,CACA,OAAW,wBAEX,CACA,OAAU,sBAEV,CACA,OAAU,eAEV,CACA,OAAU,oCAEV,CACA,OAAW,YAEX,CACA,OAAU,kBAEV,CACA,OAAU,uBAEV,CACA,OAAU,sBAEV,CACA,OAAW,SAEX,CACA,OAAU,WAEV,CACA,OAAU,gBAEV,CACA,OAAU,aAEV,CACA,OAAW,SAEX,CACA,OAAU,2BAEV,CACA,OAAU,kBAEV,CACA,OAAU,cAEV,CACA,OAAW,YAEX,CACA,OAAU,gBAEV,CACA,OAAU,oBAEV,CACA,OAAW,oBAEX,CACA,OAAU,eAEV,CACA,OAAU,wBAEV,CACA,OAAU,0BAEV,CACA,OAAW,oBAEX,CACA,OAAU,8BAEV,CACA,OAAU,4BAEV,CACA,OAAW,yBAEX,CACA,OAAU,gCAEV,CACA,OAAU,0BAEV,CACA,OAAU,uBAEV,CACA,OAAW,YAEX,CACA,OAAU,uBAEV,CACA,OAAU,WAEV,CACA,OAAW,8BAEX,CACA,OAAU,oCAEV,CACA,OAAU,UAEV,CACA,OAAU,eAEV,CACA,OAAW,WAEX,CACA,OAAU,gBAEV,CACA,OAAU,mBCxGCG,E,kDAvCb,aAAe,IAAD,8BACZ,gBAcFR,YAAc,WACZ,IAAMS,EAAuB,EAAKC,eAClC,EAAKC,SAAS,CACZN,OAAQI,EAAqBJ,SAE/B,EAAKO,cAAcP,IAlBnB,EAAKQ,MAAQ,CACXR,OAAQA,EAAO,GAAGA,QAHR,E,2DAOZ,IAAMS,EAAeZ,KAAKa,MAAMb,KAAKC,SAAWE,EAAOW,QACvD,OAAOX,EAAOS,K,oCAGFG,GACZ,OAAOA,EAAMC,MAAK,kBAAIhB,KAAKC,SAAS,Q,+BAYpC,OACE,yBAAKT,UAAU,cACb,wCACF,yBAAKA,UAAU,QACb,8EACA,kBAAC,EAAD,eACEM,YAAaF,KAAKE,aACdF,KAAKe,c,GAhCDP,IAAMC,WCOJY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.0d8f47be.chunk.js","sourcesContent":["import React from \"react\";\nimport Button from '@material-ui/core/Button';\n\n\nclass RecipeSelector extends React.Component {\n  render() {\n    return (\n      <div className=\"box\">\n        <Button variant=\"contained\"\n        onClick={this.props.handleClick}\n        >\n        New Recipe\n        </Button> \n        <div\n         className=\"fadeIn\"\n         key={Math.random()}\n        >\n          <h4 id=\"recipe\">{this.props.recipe}</h4>\n        </div>\n       \n      </div>\n    );\n  }\n}\n\nexport default RecipeSelector;","const recipe=[\n    {\n    \"recipe\": \"\"\n    },\n\t{\n    \"recipe\": \"Taco Bake\"\n    }, \n    {\n    \"recipe\": \"Chicken Bacon Ranch Casserole\"\n    }, \n    {\n    \"recipe\": \"Tacos\"\n    }, \n    {\n    \"recipe\": \"Chicken Bacon Ranch Wraps\"\n    },\n    {\n    \"recipe\": \"Hamballs\"\n    }, \n    {\n    \"recipe\": \"BLT\"\n    }, \n    {\n    \"recipe\": \"Tator Tot Casserole\"\n    }, \n    {\n    \"recipe\": \"Macaroni and Corn\"\n    },\n    {\n    \"recipe\": \"Chicken Quinoa and Vegetable Skillet\"\n    }, \n    {\n    \"recipe\":  \"Philly Cheese Steaks\"\n    }, \n    {\n    \"recipe\": \"Sausage Sandwiches\"\n    }, \n    {\n    \"recipe\": \"Flat Breads\"\n    },\n    {\n    \"recipe\": \"Ham and Egg Breakfast Sandwiches\"\n    }, \n    {\n    \"recipe\":  \"Pancakes\"\n    },\n    {\n    \"recipe\": \"Breakfast Hash\"\n    }, \n    {\n    \"recipe\": \"Breakfast Casserole\"\n    },\n    {\n    \"recipe\": \"Biscuits and Gravy\"\n    }, \n    {\n    \"recipe\":  \"Wraps\"\n    }, \n    {\n    \"recipe\": \"Goulash\"\n    }, \n    {\n    \"recipe\": \"Dorito Salad\"\n    },\n    {\n    \"recipe\": \"Pork Loin\"\n    }, \n    {\n    \"recipe\":  \"Wings\"\n    }, \n    {\n    \"recipe\": \"Pineapple Salsa Chicken\"\n    }, \n    {\n    \"recipe\": \"Orange Chicken\"\n    },\n    {\n    \"recipe\": \"Drumsticks\"\n    }, \n    {\n    \"recipe\":  \"Burritos\"\n    }, \n    {\n    \"recipe\": \"Crunch Wraps\"\n    }, \n    {\n    \"recipe\": \"Alfredo Roll Ups\"\n    }, \n    {\n    \"recipe\":  \"Cuban Sandwiches\"\n    }, \n    {\n    \"recipe\": \"Ham Sliders\"\n    }, \n    {\n    \"recipe\": \"Stuffed Bell Peppers\"\n    },\n    {\n    \"recipe\": \"Chicken Enchilada Soup\"\n    }, \n    {\n    \"recipe\":  \"Chicken Stir Fry\"\n    }, \n    {\n    \"recipe\": \"Scalloped Potatoes and Ham\"\n    }, \n    {\n    \"recipe\": \"Crockpot Italian Chicken\"\n    }, \n    {\n    \"recipe\":  \"Loaded Baked Potatoes\"\n    }, \n    {\n    \"recipe\": \"Cheesy Chicken and Rice Bake\"\n    }, \n    {\n    \"recipe\": \"Hamburger Rice Hotdish\"\n    },\n    {\n    \"recipe\": \"Chicken Noodle Soup\"\n    }, \n    {\n    \"recipe\":  \"Meatloaf\"\n    }, \n    {\n    \"recipe\": \"White Chicken Chili\"\n    }, \n    {\n    \"recipe\": \"Lasagna\"\n    }, \n    {\n    \"recipe\":  \"Beef or Chicken Enchiladas\"\n    }, \n    {\n    \"recipe\": \"Cap’n Crunch Chicken Strips\"\n    }, \n    {\n    \"recipe\": \"Steaks\"\n    },\n    {\n    \"recipe\": \"Pulled Pork\"\n    }, \n    {\n    \"recipe\":  \"Brisket\"\n    }, \n    {\n    \"recipe\": \"Smoked Beans\"\n    }, \n    {\n    \"recipe\": \"Smoked Chicken\"\n    }\n]\n\nexport default recipe","import React from 'react';\nimport './App.css';\nimport RecipeSelector from './RecipeSelector';\nimport recipe from './components/dinneroptions';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      recipe: recipe[0].recipe,\n    };\n  }\n  randomRecipe() {\n    const randomNumber = Math.floor(Math.random() * recipe.length);\n    return recipe[randomNumber];\n    \n  }\n  shuffleRecipe(array){\n    return array.sort(()=>Math.random()-0.5)\n  }\n\n  handleClick = () => {\n    const generateRandomRecipe = this.randomRecipe();\n    this.setState({\n      recipe: generateRandomRecipe.recipe,\n    });\n    this.shuffleRecipe(recipe)\n  };\n  \n  render() {\n    return (\n      <div className=\"App-header\">\n        <h1>RecipeMe</h1>\n      <div className=\"Body\">\n        <h4>Hit the button to randomly select a new recipe</h4>\n        <RecipeSelector\n          handleClick={this.handleClick}\n          {...this.state}\n        />\n      </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}